DROP SCHEMA IF EXISTS task3 CASCADE;
CREATE SCHEMA task3;

SHOW search_path ;

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

DROP TABLE IF EXISTS task3.Teacher CASCADE;
DROP TABLE IF EXISTS task3.Lesson CASCADE;
DROP TABLE IF EXISTS task3.Student CASCADE;
DROP TABLE IF EXISTS task3.LessonToStudent CASCADE;

-- Создание таблицы Department
CREATE TABLE task3.Teacher
(
    id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50)
);

-- Создание таблицы Employee
CREATE TABLE task3.Lesson
(
    id            INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name          VARCHAR(50),
    teacher_id INT,
    FOREIGN KEY (teacher_id) REFERENCES task3.Teacher (id) ON DELETE SET NULL
);

-- Создание таблицы Project
CREATE TABLE task3.Student
(
    id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) UNIQUE
);

-- Создание таблицы-связи EmployeeProject
CREATE TABLE task3.LessonToStudent
(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lesson_id INT,
    student_id  INT,
    FOREIGN KEY (lesson_id) REFERENCES task3.Lesson (id) ON DELETE CASCADE ,
    FOREIGN KEY (student_id) REFERENCES task3.Student (id) ON DELETE CASCADE
);


-- Вставка данных
INSERT INTO task3.Teacher (name)
VALUES ('Alex'); -- 1
INSERT INTO task3.Teacher (name)
VALUES ('Viktor'); -- 2
INSERT INTO task3.Teacher (name)
VALUES ('Stas'); -- 3



INSERT INTO task3.Lesson (name, teacher_id)
VALUES ('Физика', 1); -- 1
INSERT INTO task3.Lesson (name, teacher_id)
VALUES ('Математика', 2); -- 2
INSERT INTO task3.Lesson (name, teacher_id)
VALUES ('Физкультура', 3); -- 3
INSERT INTO task3.Lesson (name, teacher_id)
VALUES ('Программирование', 3); -- 4



INSERT INTO task3.Student (name)
VALUES ('Федор'); -- 1
INSERT INTO task3.Student (name)
VALUES ('Маша'); -- 2
INSERT INTO task3.Student (name)
VALUES ('Леша'); -- 3
INSERT INTO task3.Student (name)
VALUES ('Вася'); -- 4

INSERT INTO task3.LessonToStudent (lesson_id, student_id)
VALUES (1, 1);
INSERT INTO task3.LessonToStudent (lesson_id, student_id)
VALUES (1, 2);
INSERT INTO task3.LessonToStudent (lesson_id, student_id)
VALUES (1, 3);
INSERT INTO task3.LessonToStudent (lesson_id, student_id)
VALUES (2, 1);
INSERT INTO task3.LessonToStudent (lesson_id, student_id)
VALUES (2, 2);


--
-- SELECT *
-- FROM task3.role;
--
-- SELECT *
-- FROM task3.employee;
--
-- SELECT *
-- FROM task3.project;
--
-- SELECT e.*, d.name
-- FROM task3.employee e
--          JOIN task3.role d on d.id = e.role_id;
--
-- SELECT e.name, p.name
-- FROM task3.employee e
--          JOIN task3.employeeproject e2 on e.id = e2.employee_id
--          JOIN task3.project p on p.id = e2.project_id;
--
-- SELECT e.name, p.name
-- FROM task3.employee e
--          JOIN task3.employeeproject e2 on e.id = e2.employee_id
--          JOIN task3.project p on p.id = e2.project_id
-- WHERE e2.project_id = 2;
--
--
-- -- Создать нового работника
-- INSERT INTO task3.employee (name, role_id)
-- VALUES ('Сергей Крикалев', 3);
--
-- -- Создать новый проект
-- INSERT INTO task3.Project (name)
-- VALUES ('Project 0'); -- 5
--
-- -- Создание в таблице task3.EmployeeProject новой связи где name = 'Сергей Крикалев'
-- INSERT INTO task3.EmployeeProject (employee_id, project_id)
-- VALUES ((SELECT e.id FROM task3.employee e WHERE name = 'Сергей Крикалев'), 4);
--
-- -- Изменение project_id=5 в таблице task3.EmployeeProject где name = 'Сергей Крикалев'
-- UPDATE task3.EmployeeProject
-- SET project_id=5
-- WHERE employee_id = (SELECT e.id FROM task3.employee e WHERE name = 'Сергей Крикалев');

-- DELETE FROM task3.employee WHERE name = 'Сергей Крикалев';

-- DELETE FROM task3.Project WHERE name = 'Project 0';


-- INSERT INTO task3.employee (name, department_id)
-- VALUES ('ЧЧЧ ЧЧЧ', 1);
--
-- -- Удаление работника где name = 'Сергей Крикалев'
-- DELETE FROM task3.employee WHERE name = 'ЧЧЧ ЧЧЧ';

